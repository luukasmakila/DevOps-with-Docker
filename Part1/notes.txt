Notes for part 1

Containers:
  -Virtualizes the OS (OS level virtualization vs VM's hardware level virtualization)
  -Fast, lightweight "micro computers" (don't take up much resources)
  -Have their own OS, CPU, memory

Containerization:
  -Starts with a description with the container itself (ex. Docker file)
  -Create the image (ex. Docker image)
  -Container ready (contains code, libraries... to run the application)

Benefits of containers:
  -Allows for super agile DevOps
  -If one container isn't using it's resources, the resources become accessible for the other containers running within that hardware
  -Load balancing traffic between containers (easy scaling)
  -Takes less resources than VM's, since every VM needs it's own OS
  -Can run on basically any system anywhere regardless of OS
  -Quarantined from the rest of the system and secure (Apps only see whats necessary for them to run and nothing else)

Containers are instances of images

What are images?
  -A Docker image is a file that is never changing (you can't edit an existing file)
  -Creating a new image can be done by starting from a base image and adding layers to it

Dockerfile is the recipe to create the pre-cooked food (image) and once the food is heated up you get a treat (container)

Image commands:
  -docker image ls (lists all your images)
  -docker image build (creates a dockerfile, that contains the instructions to create the image)
  -docker image rm <image name> (removes an image)
  -docker image pull <image name> (pulls image from docker registry)

Container commands:
  -docker container ls (lists all the running containers, add -a tag to get the exited ones too)
  -docker container run <image name> (runs container from an image)
  -docker container rm <container name> (removes the container)
  -docker container stop <container name> (stops container)
  -docker container start <container name> (starts container)
  -docker container exec <container name> (allows executing commands inside the container)
  -docker container attach <container name> (attaches terminals input / output to a running container)
  -docker container prune (removes all stopped containers)

Command flags:
  -i (interactive, used to interact with the container via terminal)
  -t (tty)
  -d (detached, runs container in the background)
  -a (all)
  -v (for creating a volume)
  --mount (for bind mounting)

Dockerfile instructions:
  -FROM <image name> (start a pre built image)
  -WORKDIR <path> (instructions execute at this location)
  -COPY <file name> <to this location>
  -ENV <var name>=<value> (environment variables)
  -ENTRYPOINT <command> (starting command)
  -RUN <command / commands> (for ex. install a package or add execution permisisons)
  -CMD <command> (starting command for "docker run <command>")

ENTRYPOINT vs CMD?
CMD commands can be overridden from the CLI when a container is running.
ENTRYPOINT commands cannot be overridden with CLI params.

Volumes:
  -Allows the host system and a container to share a file
  -Place where data can be stored permanently (even when container shuts off)
  -Same volume can be used in multiple containers